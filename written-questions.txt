Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?
    
    Answer: It shows much longer time for ParallelWebCrawler because it calculates the sum of all threads which perform parse method.


Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?
        
        Answer (a): Since an older computer is likely to have only one core, SequentialWebCrawler will work best on such systems.
                    In ParallelWebCrawler, the more parallelism we set up, the more thread context switching we have, which reduces performance on one core systems.
        Answer (b): ParallelWebCrawler will perform better on multi-processors/cores systems. It will perform better because each thread will perform on separate processor/core. 


Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?

    (b) What are the join points of the Profiler in the web crawler program?
    
        Answer (a): Logging perfomance time for profiled methods.
        Answer (b): Join points are methods annotated @Profiled.
    

Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.

    Answer: 1. Dependency injection pattern: used in many places such as WebCrawlerMain, PageParserFactoryImpl, etc. Used @Inject annotation.
               Like that it is easy to inject beans into different classes. Dislike that it is a very complex configuration and requires reading documentation before usage.
            2. Builder pattern: used in many places such as CrawlerConfiguration, CrawlResult, etc. Like that it is easy to build new objects. Dislike that requires additional code to make it working.
            3. Proxy pattern used in ProfilerImpl. Like that we can wrap any method for proxied class and perform required logic for this method(s). Dislike that that requires additional InvocationHandler implementation to make it working that adds complexity to the project, requires reading documentation before implementation.